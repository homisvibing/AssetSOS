/*
    Homepage CSS Styling for The Creative Spec Guide
    This CSS complements the Tailwind CSS framework linked in the HTML.
    It provides custom styles for elements not fully covered by Tailwind,
    and demonstrates how to achieve responsiveness and an app-like feel.
*/

/* Base Styles (already in HTML <style> block, but good to note here) */
body {
    font-family: 'Inter', sans-serif;
    background-color: #f8f8f8; /* Light background for a minimalist feel */
    color: #333;
}

/* Basic styling for interactive elements to make them rounded (already in HTML <style> block) */
.rounded-lg { border-radius: 0.5rem; }
.rounded-xl { border-radius: 0.75rem; }
.rounded-full { border-radius: 9999px; }

/*
    1. Header Responsiveness & Mobile Navigation
    Tailwind classes handle most of the header's responsiveness (flex, justify-between, hidden md:flex).
    Here we add custom CSS for the mobile menu overlay/slide-out, which will be toggled by JavaScript.
*/

/* Mobile Navigation Overlay (initially hidden) */
.mobile-nav-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */
    z-index: 20; /* Above header, below mobile menu */
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
}

/* Mobile Navigation Menu (slide-out from right) */
.mobile-nav-menu {
    position: fixed;
    top: 0;
    right: -100%; /* Start off-screen to the right */
    width: 70%; /* Adjust as needed for mobile screen size */
    max-width: 300px; /* Max width for larger tablets in portrait */
    height: 100%;
    background-color: #ffffff;
    box-shadow: -4px 0 10px rgba(0, 0, 0, 0.1);
    z-index: 30; /* Above overlay */
    transition: right 0.3s ease;
    display: flex;
    flex-direction: column;
    padding: 1.5rem;
}

/* State when mobile menu is active (toggled by JS) */
.mobile-nav-overlay.active {
    opacity: 1;
    visibility: visible;
}

.mobile-nav-menu.active {
    right: 0; /* Slide into view */
}

/* Styling for links within the mobile navigation menu */
.mobile-nav-menu a {
    display: block;
    padding: 0.75rem 0;
    font-size: 1.125rem; /* text-lg */
    font-weight: 600; /* font-semibold */
    color: #333;
    border-bottom: 1px solid #eee;
    transition: color 0.2s ease;
}

.mobile-nav-menu a:hover {
    color: #2563eb; /* blue-600 */
}

.mobile-nav-menu a:last-child {
    border-bottom: none;
}

/* Close button for mobile menu */
.mobile-nav-menu .close-btn {
    align-self: flex-end; /* Push to top right */
    margin-bottom: 1rem;
    padding: 0.5rem;
    background-color: #f0f0f0;
    border-radius: 9999px; /* rounded-full */
    color: #555;
    transition: background-color 0.2s ease, color 0.2s ease;
}

.mobile-nav-menu .close-btn:hover {
    background-color: #e0e0e0;
    color: #333;
}

/*
    2. Main Content Area Responsiveness
    The `container mx-auto px-4 py-8 md:py-12` classes already handle horizontal centering,
    padding, and vertical spacing.
    The `grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3` on the spec cards section
    is a prime example of Tailwind's responsive grid.
*/

/* No additional custom CSS needed here for general layout responsiveness,
   as Tailwind's utility-first approach is highly effective. */

/*
    3. Filter Options Section
    The `grid grid-cols-1 md:grid-cols-3 gap-6` handles the responsiveness of the filter selects.
    The `flex-1` on the Digital/Offline buttons ensures they share space equally.
*/

/* No additional custom CSS needed here. */

/*
    4. Floating Suggestion Box Icon
    Tailwind's `fixed bottom-4 right-4` handles positioning.
    `rounded-full`, `shadow-lg`, `hover:bg-blue-700`, `focus:outline-none`,
    `focus:ring-2`, `focus:ring-blue-500`, `transition-colors` handle styling and interaction.
*/

/* No additional custom CSS needed here. */

/*
    5. General Interactive Element Enhancements (beyond basic Tailwind)
    Adding subtle hover effects or transitions to elements for an "app-like feel".
    Many are already covered by Tailwind's hover: and transition- classes.
*/

/* Example: Enhancing the search button's active state */
.max-w-xl button:active {
    transform: translateY(1px); /* Slight press effect */
}

/* Example: Enhancing filter buttons' active state */
.filter-options-section button:active {
    transform: translateY(1px);
}

/*
    6. Accessibility (SR-Only for screen readers)
    The `sr-only` class is a Tailwind utility to hide content visually but keep it accessible
    to screen readers.
*/
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}
